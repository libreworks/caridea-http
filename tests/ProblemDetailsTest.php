<?php
declare(strict_types=1);
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2016 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Http;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-04 at 17:16:31.
 */
class ProblemDetailsTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Http\ProblemDetails::getType
     * @covers Caridea\Http\ProblemDetails::__construct
     * @covers Caridea\Http\ProblemDetails::toArray
     * @covers Caridea\Http\ProblemDetails::toJson
     * @covers Caridea\Http\ProblemDetails::jsonSerialize
     */
    public function testGetType()
    {
        $uri = $this->getMockForAbstractClass(\Psr\Http\Message\UriInterface::class, ['__toString']);
        $uri->expects($this->any())
            ->method('__toString')
            ->willReturn('http://example.com/foo');
        $object = new ProblemDetails($uri);
        $this->assertSame($uri, $object->getType());
        $this->assertEquals(['type' => 'http://example.com/foo'], $object->toArray());
        $this->assertEquals('{"type":"http:\/\/example.com\/foo"}', $object->toJson());
        $this->assertEquals('{"type":"http:\/\/example.com\/foo"}', json_encode($object));
    }

    /**
     * @covers Caridea\Http\ProblemDetails::getTitle
     * @covers Caridea\Http\ProblemDetails::__construct
     * @covers Caridea\Http\ProblemDetails::toArray
     * @covers Caridea\Http\ProblemDetails::toJson
     * @covers Caridea\Http\ProblemDetails::jsonSerialize
     */
    public function testGetTitle()
    {
        $object = new ProblemDetails(null, 'A problem has occurred');
        $this->assertSame('A problem has occurred', $object->getTitle());
        $this->assertEquals(['type' => 'about:blank', 'title' => 'A problem has occurred'], $object->toArray());
        $this->assertEquals('{"type":"about:blank","title":"A problem has occurred"}', $object->toJson());
        $this->assertEquals('{"type":"about:blank","title":"A problem has occurred"}', json_encode($object));
    }

    /**
     * @covers Caridea\Http\ProblemDetails::getStatus
     * @covers Caridea\Http\ProblemDetails::__construct
     * @covers Caridea\Http\ProblemDetails::toArray
     * @covers Caridea\Http\ProblemDetails::toJson
     * @covers Caridea\Http\ProblemDetails::jsonSerialize
     */
    public function testGetStatus()
    {
        $object = new ProblemDetails(null, null, 404);
        $this->assertNull($object->getType());
        $this->assertSame(404, $object->getStatus());
        $this->assertEquals(['type' => 'about:blank', 'status' => 404], $object->toArray());
        $this->assertEquals('{"type":"about:blank","status":404}', $object->toJson());
        $this->assertEquals('{"type":"about:blank","status":404}', json_encode($object));
    }

    /**
     * @covers Caridea\Http\ProblemDetails::getDetail
     * @covers Caridea\Http\ProblemDetails::__construct
     * @covers Caridea\Http\ProblemDetails::toArray
     * @covers Caridea\Http\ProblemDetails::toJson
     */
    public function testGetDetail()
    {
        $object = new ProblemDetails(null, null, 0, 'You should fix this');
        $this->assertSame('You should fix this', $object->getDetail());
        $this->assertEquals(['type' => 'about:blank', 'detail' => 'You should fix this'], $object->toArray());
        $this->assertEquals('{"type":"about:blank","detail":"You should fix this"}', $object->toJson());
    }

    /**
     * @covers Caridea\Http\ProblemDetails::getInstance
     * @covers Caridea\Http\ProblemDetails::__construct
     * @covers Caridea\Http\ProblemDetails::toArray
     * @covers Caridea\Http\ProblemDetails::toJson
     */
    public function testGetInstance()
    {
        $uri = $this->getMockForAbstractClass(\Psr\Http\Message\UriInterface::class, ['__toString']);
        $uri->expects($this->any())
            ->method('__toString')
            ->willReturn('http://example.com/foo');
        $object = new ProblemDetails(null, null, 0, null, $uri);
        $this->assertSame($uri, $object->getInstance());
        $this->assertEquals(['type' => 'about:blank', 'instance' => 'http://example.com/foo'], $object->toArray());
        $this->assertEquals('{"type":"about:blank","instance":"http:\/\/example.com\/foo"}', $object->toJson());
    }

    /**
     * @covers Caridea\Http\ProblemDetails::getExtensions
     * @covers Caridea\Http\ProblemDetails::__construct
     * @covers Caridea\Http\ProblemDetails::toArray
     * @covers Caridea\Http\ProblemDetails::toJson
     * @covers Caridea\Http\ProblemDetails::__toString
     */
    public function testGetExtensions()
    {
        $object = new ProblemDetails(null, null, 0, null, null, ['foo' => 'bar', 'cloud_9' => 'great']);
        $this->assertEquals(['foo' => 'bar', 'cloud_9' => 'great'], $object->getExtensions());
        $this->assertEquals(['type' => 'about:blank', 'foo' => 'bar', 'cloud_9' => 'great'], $object->toArray());
        $this->assertEquals('{"type":"about:blank","foo":"bar","cloud_9":"great"}', $object->toJson());
        $this->assertEquals('{"type":"about:blank","foo":"bar","cloud_9":"great"}', (string)$object);
    }

    /**
     * @covers Caridea\Http\ProblemDetails::__construct
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Invalid extension name: 'status'
     */
    public function testBadExtensions1()
    {
        new ProblemDetails(null, null, 0, null, null, ['status' => 'single']);
    }

    /**
     * @covers Caridea\Http\ProblemDetails::__construct
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Invalid extension name: '911'
     */
    public function testBadExtensions2()
    {
        new ProblemDetails(null, null, 0, null, null, [911 => 'emergency']);
    }

    /**
     * @covers Caridea\Http\ProblemDetails::send
     */
    public function testSend()
    {
        $object = new ProblemDetails(null, 'A problem has occurred');
        $json = '{"type":"about:blank","title":"A problem has occurred"}';
        $response = $this->createMock(\Psr\Http\Message\ResponseInterface::class);
        $body = $this->createMock(\Psr\Http\Message\StreamInterface::class);
        $body->expects($this->once())->method('write')->with($this->equalTo($json));
        $response->expects($this->once())->method('getBody')->willReturn($body);
        $response->expects($this->once())->method('withHeader')
            ->with($this->equalTo('Content-Type'), $this->equalTo(ProblemDetails::MIME_TYPE_JSON))
            ->willReturn($response);
        $this->assertSame($response, $object->send($response));
        $this->verifyMockObjects();
    }
}
