<?php
declare(strict_types=1);
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2018 LibreWorks contributors
 * @license   Apache-2.0
 */
namespace Caridea\Http;

use Psr\Http\Message\UriInterface;
use Psr\Http\Message\ResponseInterface;

/**
 * An implementation of RFC 7807, Problem Details for HTTP APIs.
 *
 * @copyright 2015-2018 LibreWorks contributors
 * @license   Apache-2.0
 * @see https://tools.ietf.org/html/rfc7807
 */
class ProblemDetails implements \JsonSerializable
{
    const MIME_TYPE_JSON = 'application/problem+json';
    const REGEX_NAMES = '/^[a-z][a-z0-9_]{2,}$/i';

    /**
     * @var \Psr\Http\Message\UriInterface An absolute URI that identifies the problem type
     */
    protected $type;
    /**
     * @var string A short, human-readable summary of the problem type
     */
    protected $title;
    /**
     * @var int The HTTP status code generated by the origin server for this occurrence of the problem
     */
    protected $status;
    /**
     * @var string A human-readable explanation specific to this occurrence of the problem
     */
    protected $detail;
    /**
     * @var \Psr\Http\Message\UriInterface An absolute URI that identifies the specific occurrence of the problem
     */
    protected $instance;
    /**
     * @var array<string,mixed> Map of `string` names to `mixed` values
     */
    protected $extensions = [];
    /**
     * @var array Cached output
     */
    protected $output;

    /**
     * Creates a new ProblemDetails.
     *
     * The `extensions` parameter, if provided, must be an associative array
     * matching names to values. Each name must follow the guidelines in the
     * RFC, namely start with a letter, be at least three characters long, and
     * only contain alpha, digit, and the underscore. The values can be of any
     * type, but be aware that the values must be easily converted to JSON. You
     * pretty much always want these values to be immutable.
     *
     * @param \Psr\Http\Message\UriInterface|null $type An absolute URI that identifies the problem type
     * @param string|null $title A short, human-readable summary of the problem type
     * @param int $status The HTTP status code generated by the origin server for this occurrence of the problem
     * @param string|null $detail A human-readable explanation specific to this occurrence of the problem
     * @param \Psr\Http\Message\UriInterface|null $instance An absolute URI that identifies the specific occurrence of the problem
     * @param array $extensions Additional members to the ProblemDetails
     */
    public function __construct(UriInterface $type = null, string $title = null, int $status = 0, string $detail = null, \Psr\Http\Message\UriInterface $instance = null, array $extensions = [])
    {
        $this->type = $type;
        $this->title = $title;
        $this->status = $status;
        $this->detail = $detail;
        $this->instance = $instance;
        array_walk($extensions, function ($v, $k) {
            if (!preg_match(self::REGEX_NAMES, (string) $k) || property_exists($this, (string) $k)) {
                throw new \InvalidArgumentException("Invalid extension name: '$k'");
            }
        });
        $this->extensions = $extensions;
    }

    /**
     * Gets the absolute URI that identifies the problem type
     *
     * @return \Psr\Http\Message\UriInterface|null The problem type URI (or null)
     */
    public function getType(): ?UriInterface
    {
        return $this->type;
    }

    /**
     * Gets the short, human-readable summary of the problem type.
     *
     * @return string|null A summary of the problem type
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * Gets the HTTP status code generated by the origin server for this occurrence of the problem
     *
     * @return int The status code
     */
    public function getStatus(): int
    {
        return $this->status;
    }

    /**
     * Gets a human readable explanation specific to this occurrence of the problem.
     *
     * @return string|null An explanation specific to this occurrence of the problem
     */
    public function getDetail(): ?string
    {
        return $this->detail;
    }

    /**
     * Gets the absolute URI that identifies the specific occurrence of the problem.
     *
     * @return \Psr\Http\Message\UriInterface|null The URI that identifies the specific occurrence of the problem (or null)
     */
    public function getInstance(): ?UriInterface
    {
        return $this->instance;
    }

    /**
     * Gets an array of any extension members defined.
     *
     * @return array Any extension members, never null.
     */
    public function getExtensions(): array
    {
        return $this->extensions;
    }

    /**
     * Returns a JSON representation of this problem.
     *
     * @return string The JSON representation
     */
    public function __toString(): string
    {
        return $this->toJson();
    }

    /**
     * A JSON representation of this problem.
     *
     * @return string The JSON representation
     */
    public function toJson(): string
    {
        return json_encode($this->toArray());
    }

    /**
     * Gets a serializable representation of this problem.
     *
     * @return array<string,mixed> This problem detail as an associative array
     */
    public function toArray(): array
    {
        if (empty($this->output)) {
            $problem = [
                'type' => $this->type ? (string)$this->type : 'about:blank'
            ];
            if ($this->title) {
                $problem['title'] = $this->title;
            }
            if ($this->status) {
                $problem['status'] = $this->status;
            }
            if ($this->detail) {
                $problem['detail'] = $this->detail;
            }
            if ($this->instance) {
                $problem['instance'] = (string)$this->instance;
            }
            $this->output = array_merge($problem, $this->extensions);
        }
        return $this->output;
    }

    /**
     * Returns the JSON representation.
     *
     * @return array<string,mixed> This problem detail as an associative array
     */
    public function jsonSerialize()
    {
        return $this->toArray();
    }

    /**
     * Adds this problem detail to a PSR-7 HTTP response.
     *
     * @param ResponseInterface $response The HTTP response
     * @return ResponseInterface The new response
     */
    public function send(ResponseInterface $response): ResponseInterface
    {
        $response->getBody()->write(json_encode($this->toArray()));
        return $response->withHeader('Content-Type', self::MIME_TYPE_JSON);
    }
}
